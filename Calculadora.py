# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Calculadora.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import math # Importamos la libreria math para hacer todas las operaciones

from PyQt5 import QtCore, QtGui, QtWidgets

Operaciones = ["^","√","×","÷","+","-"] # Almacenamos la lista de operaciones porque no se pueden poner seguidas
    #como ++ o --
Numerico = ["0","1","2","3","4","5","6","7","8","9",".","e","π"]
OperacionesEspeciales = ["s","c","t","l","!"]


TodasLasOperaciones = []
class Ui_Calculadora(object):
    def setupUi(self, Calculadora):
        Calculadora.setObjectName("Calculadora")
        Calculadora.resize(894, 600)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../../.designer/backup/ImagesFiles/736663fe6f9e03fcb39ace9020c42b4c-icono-de-calculadora-estacionaria-by-vexels.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Calculadora.setWindowIcon(icon)
        Calculadora.setStyleSheet("background-color:rgb(253, 184, 39)")
        self.centralwidget = QtWidgets.QWidget(Calculadora)
        self.centralwidget.setObjectName("centralwidget")
        # Botones de los números -----------------------------------------------------
        self.n_1 = QtWidgets.QPushButton(self.centralwidget)
        self.n_1.setGeometry(QtCore.QRect(480, 240, 81, 81))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.n_1.setFont(font)
        self.n_1.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.n_1.setObjectName("n_1")
        self.n_2 = QtWidgets.QPushButton(self.centralwidget)
        self.n_2.setGeometry(QtCore.QRect(580, 240, 81, 81))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.n_2.setFont(font)
        self.n_2.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.n_2.setObjectName("n_2")
        self.n_3 = QtWidgets.QPushButton(self.centralwidget)
        self.n_3.setGeometry(QtCore.QRect(680, 240, 81, 81))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.n_3.setFont(font)
        self.n_3.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.n_3.setObjectName("n_3")
        self.n_4 = QtWidgets.QPushButton(self.centralwidget)
        self.n_4.setGeometry(QtCore.QRect(480, 340, 81, 81))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.n_4.setFont(font)
        self.n_4.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.n_4.setObjectName("n_4")
        self.n_5 = QtWidgets.QPushButton(self.centralwidget)
        self.n_5.setGeometry(QtCore.QRect(580, 340, 81, 81))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.n_5.setFont(font)
        self.n_5.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.n_5.setObjectName("n_5")
        self.n_6 = QtWidgets.QPushButton(self.centralwidget)
        self.n_6.setGeometry(QtCore.QRect(680, 340, 81, 81))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.n_6.setFont(font)
        self.n_6.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.n_6.setObjectName("n_6")
        self.n_7 = QtWidgets.QPushButton(self.centralwidget)
        self.n_7.setGeometry(QtCore.QRect(480, 440, 81, 81))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.n_7.setFont(font)
        self.n_7.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.n_7.setObjectName("n_7")
        self.n_8 = QtWidgets.QPushButton(self.centralwidget)
        self.n_8.setGeometry(QtCore.QRect(580, 440, 81, 81))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.n_8.setFont(font)
        self.n_8.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.n_8.setObjectName("n_8")
        self.n_9 = QtWidgets.QPushButton(self.centralwidget)
        self.n_9.setGeometry(QtCore.QRect(680, 440, 81, 81))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.n_9.setFont(font)
        self.n_9.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.n_9.setObjectName("n_9")
        # Operaciones (suma,resta,multiplicacion,division,igual )----------------------------------------------------------
        self.equal = QtWidgets.QPushButton(self.centralwidget)
        self.equal.setGeometry(QtCore.QRect(790, 480, 81, 41))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.equal.setFont(font)
        self.equal.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.equal.setObjectName("equal")
        self.plus = QtWidgets.QPushButton(self.centralwidget)
        self.plus.setGeometry(QtCore.QRect(790, 420, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.plus.setFont(font)
        self.plus.setStyleSheet("background-color: rgb(241, 241, 241)\n"
"")
        self.plus.setObjectName("plus")
        self.subtraction = QtWidgets.QPushButton(self.centralwidget)
        self.subtraction.setGeometry(QtCore.QRect(790, 360, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.subtraction.setFont(font)
        self.subtraction.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.subtraction.setObjectName("subtraction")
        self.divide = QtWidgets.QPushButton(self.centralwidget)
        self.divide.setGeometry(QtCore.QRect(790, 300, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.divide.setFont(font)
        self.divide.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.divide.setObjectName("divide")
        self.multiply = QtWidgets.QPushButton(self.centralwidget)
        self.multiply.setGeometry(QtCore.QRect(790, 240, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.multiply.setFont(font)
        self.multiply.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.multiply.setObjectName("multiply")
        # Clean Entry -----------------------------------------------------
        self.cleanentry = QtWidgets.QPushButton(self.centralwidget)
        self.cleanentry.setGeometry(QtCore.QRect(790, 170, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.cleanentry.setFont(font)
        self.cleanentry.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.cleanentry.setObjectName("cleanentry")
        # Porcentaje --------------------------------------------------
        self.eulerexponent = QtWidgets.QPushButton(self.centralwidget)
        self.eulerexponent.setGeometry(QtCore.QRect(680, 170, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.eulerexponent.setFont(font)
        self.eulerexponent.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.eulerexponent.setObjectName("eulerexponent")
        # Parentesis ---------------------------------------------------
        # Close
        self.parentheses_C = QtWidgets.QPushButton(self.centralwidget)
        self.parentheses_C.setGeometry(QtCore.QRect(380, 460, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.parentheses_C.setFont(font)
        self.parentheses_C.setStyleSheet("background-color: rgb(241, 241, 241)\n""")
        self.parentheses_C.setObjectName("parentheses_C")
        # Open
        self.parentheses_O = QtWidgets.QPushButton(self.centralwidget)
        self.parentheses_O.setGeometry(QtCore.QRect(380, 400, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.parentheses_O.setFont(font)
        self.parentheses_O.setStyleSheet("background-color: rgb(241, 241, 241)\n""")
        self.parentheses_O.setObjectName("parentheses_O")
        # Factorial -----------------------------------------------------
        self.factorial = QtWidgets.QPushButton(self.centralwidget)
        self.factorial.setGeometry(QtCore.QRect(30, 320, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.factorial.setFont(font)
        self.factorial.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.factorial.setObjectName("factorial")
        # Modo Grados / radianes ----------------------------------------
        self.deg = QtWidgets.QPushButton(self.centralwidget)
        self.deg.setGeometry(QtCore.QRect(230, 170, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.deg.setFont(font)
        self.deg.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.deg.setObjectName("deg")
        self.rad = QtWidgets.QPushButton(self.centralwidget)
        self.rad.setGeometry(QtCore.QRect(130, 170, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.rad.setFont(font)
        self.rad.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.rad.setObjectName("rad")
        self.mode = QtWidgets.QLabel(self.centralwidget)
        self.mode.setGeometry(QtCore.QRect(30, 190, 81, 16))
        font = QtGui.QFont()
        font.setFamily("Lucida Console")
        font.setPointSize(10)
        self.mode.setFont(font)
        self.mode.setStyleSheet("background-color:rgb(241, 241, 241)")
        self.mode.setObjectName("mode")
        # Trigonometricas -----------------------------------------------
        self.tan = QtWidgets.QPushButton(self.centralwidget)
        self.tan.setGeometry(QtCore.QRect(230, 250, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.tan.setFont(font)
        self.tan.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.tan.setObjectName("tan")
        self.cos = QtWidgets.QPushButton(self.centralwidget)
        self.cos.setGeometry(QtCore.QRect(130, 250, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.cos.setFont(font)
        self.cos.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.cos.setObjectName("cos")
        self.sen = QtWidgets.QPushButton(self.centralwidget)
        self.sen.setGeometry(QtCore.QRect(30, 250, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.sen.setFont(font)
        self.sen.setStyleSheet("background-color: rgb(241, 241, 241)\n"
"")
        self.sen.setObjectName("sen")
        # Pi
        self.pi = QtWidgets.QPushButton(self.centralwidget)
        self.pi.setGeometry(QtCore.QRect(130, 320, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.pi.setFont(font)
        self.pi.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.pi.setObjectName("pi")
        # Logaritmos, exponentes, exp y ans --------------------------
        self.log = QtWidgets.QPushButton(self.centralwidget)
        self.log.setGeometry(QtCore.QRect(230, 320, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.log.setFont(font)
        self.log.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.log.setObjectName("log")
        self.n_euler = QtWidgets.QPushButton(self.centralwidget)
        self.n_euler.setGeometry(QtCore.QRect(30, 390, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.n_euler.setFont(font)
        self.n_euler.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.n_euler.setObjectName("n_euler")
        self.root = QtWidgets.QPushButton(self.centralwidget)
        self.root.setGeometry(QtCore.QRect(130, 390, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.root.setFont(font)
        self.root.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.root.setObjectName("root")
        self.ln = QtWidgets.QPushButton(self.centralwidget)
        self.ln.setGeometry(QtCore.QRect(230, 390, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.ln.setFont(font)
        self.ln.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.ln.setObjectName("ln")
        self.ans = QtWidgets.QPushButton(self.centralwidget)
        self.ans.setGeometry(QtCore.QRect(30, 460, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.ans.setFont(font)
        self.ans.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.ans.setObjectName("ans")
        self.exp = QtWidgets.QPushButton(self.centralwidget)
        self.exp.setGeometry(QtCore.QRect(130, 460, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.exp.setFont(font)
        self.exp.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.exp.setObjectName("exp")
        self.exponent = QtWidgets.QPushButton(self.centralwidget)
        self.exponent.setGeometry(QtCore.QRect(230, 460, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.exponent.setFont(font)
        self.exponent.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.exponent.setObjectName("exponent")
        # Demas ------------------------------------
        self.n_0 = QtWidgets.QPushButton(self.centralwidget)
        self.n_0.setGeometry(QtCore.QRect(380, 240, 81, 81))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.n_0.setFont(font)
        self.n_0.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.n_0.setObjectName("n_0")
        self.point = QtWidgets.QPushButton(self.centralwidget)
        self.point.setGeometry(QtCore.QRect(380, 340, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        self.point.setFont(font)
        self.point.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.point.setObjectName("point")
        # Caja de texto entrada --------------------------------------------
        self.inputbox = QtWidgets.QLineEdit(self.centralwidget)
        self.inputbox.setGeometry(QtCore.QRect(30, 80, 651, 51))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.inputbox.setFont(font)
        self.inputbox.setStyleSheet("background-color: rgb(241, 241, 241)")
        self.inputbox.setText("")
        self.inputbox.setObjectName("inputbox")
        # ------------------------------------------------------------------
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 20, 741, 41))
        font = QtGui.QFont()
        font.setFamily("Lucida Console")
        font.setPointSize(24)
        self.label.setFont(font)
        self.label.setObjectName("label")
        Calculadora.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(Calculadora)
        self.statusbar.setObjectName("statusbar")
        Calculadora.setStatusBar(self.statusbar)
        self.menubar = QtWidgets.QMenuBar(Calculadora)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 894, 26))
        self.menubar.setObjectName("menubar")
        self.menuCalculadora = QtWidgets.QMenu(self.menubar)
        self.menuCalculadora.setObjectName("menuCalculadora")
        Calculadora.setMenuBar(self.menubar)
        self.menubar.addAction(self.menuCalculadora.menuAction())

        self.retranslateUi(Calculadora)
        QtCore.QMetaObject.connectSlotsByName(Calculadora)

        # triggers -----------------------------------------------------------
        # Los de escribir :
        self.n_0.clicked.connect(lambda :self.Escribir("0")) # Lambada soluciona el problema , Pq?
        self.n_1.clicked.connect(lambda :self.Escribir("1"))
        self.n_2.clicked.connect(lambda :self.Escribir("2"))
        self.n_3.clicked.connect(lambda :self.Escribir("3"))
        self.n_4.clicked.connect(lambda :self.Escribir("4"))
        self.n_5.clicked.connect(lambda :self.Escribir("5"))
        self.n_6.clicked.connect(lambda :self.Escribir("6"))
        self.n_7.clicked.connect(lambda :self.Escribir("7"))
        self.n_8.clicked.connect(lambda :self.Escribir("8"))
        self.n_9.clicked.connect(lambda :self.Escribir("9"))
        self.plus.clicked.connect(lambda :self.Escribir("+"))
        self.subtraction.clicked.connect(lambda :self.Escribir("-"))
        self.multiply.clicked.connect(lambda :self.Escribir("×"))
        self.divide.clicked.connect(lambda :self.Escribir("÷"))
        self.root.clicked.connect(lambda :self.Escribir("√"))
        self.exponent.clicked.connect(lambda :self.Escribir("^"))
        self.eulerexponent.clicked.connect(lambda :self.Escribir("e^"))
        self.parentheses_C.clicked.connect(lambda :self.Escribir(")"))
        self.parentheses_O.clicked.connect(lambda :self.Escribir("("))
        self.point.clicked.connect(lambda :self.Escribir("."))
        self.n_euler.clicked.connect(lambda :self.Escribir("e"))
        self.pi.clicked.connect(lambda :self.Escribir("π"))
        self.tan.clicked.connect(lambda :self.Escribir("tan("))
        self.sen.clicked.connect(lambda :self.Escribir("sin("))
        self.cos.clicked.connect(lambda :self.Escribir("cos("))
        self.factorial.clicked.connect(lambda :self.Escribir("!"))
        self.ln.clicked.connect(lambda :self.Escribir("ln("))
        self.log.clicked.connect(lambda :self.Escribir("log("))


        # Clean Entry
        self.cleanentry.clicked.connect(lambda :self.inputbox.setText(""))
        
        # Operar 

        self.equal.clicked.connect(lambda :self.inputbox.setText((self.Operar(list(self.inputbox.text())))))
        
        

    

    def retranslateUi(self, Calculadora):

        _translate = QtCore.QCoreApplication.translate
        Calculadora.setWindowTitle(_translate("Calculadora", "Calculadora"))
        self.n_1.setText(_translate("Calculadora", "1"))
        self.n_2.setText(_translate("Calculadora", "2"))
        self.n_3.setText(_translate("Calculadora", "3"))
        self.n_4.setText(_translate("Calculadora", "4"))
        self.n_5.setText(_translate("Calculadora", "5"))
        self.n_6.setText(_translate("Calculadora", "6"))
        self.n_7.setText(_translate("Calculadora", "7"))
        self.n_8.setText(_translate("Calculadora", "8"))
        self.n_9.setText(_translate("Calculadora", "9"))
        self.equal.setText(_translate("Calculadora", "="))
        self.plus.setText(_translate("Calculadora", "+"))
        self.subtraction.setText(_translate("Calculadora", "-"))
        self.divide.setText(_translate("Calculadora", "÷"))
        self.multiply.setText(_translate("Calculadora", "×"))
        self.cleanentry.setText(_translate("Calculadora", "CE"))
        self.eulerexponent.setText(_translate("Calculadora", "e^"))
        self.parentheses_C.setText(_translate("Calculadora", ")"))
        self.parentheses_O.setText(_translate("Calculadora", "("))
        self.factorial.setText(_translate("Calculadora", "x!"))
        self.deg.setText(_translate("Calculadora", "DEG"))
        self.rad.setText(_translate("Calculadora", "RAD"))
        self.mode.setText(_translate("Calculadora", "MODE →"))
        self.tan.setText(_translate("Calculadora", "Tan"))
        self.cos.setText(_translate("Calculadora", "Cos"))
        self.sen.setText(_translate("Calculadora", "Sin"))
        self.pi.setText(_translate("Calculadora", "π"))
        self.log.setText(_translate("Calculadora", "Log"))
        self.n_euler.setText(_translate("Calculadora", "e"))
        self.root.setText(_translate("Calculadora", "√"))
        self.ln.setText(_translate("Calculadora", "Ln"))
        self.ans.setText(_translate("Calculadora", "Ans"))
        self.exp.setText(_translate("Calculadora", "EXP"))
        self.exponent.setText(_translate("Calculadora", "x^y"))
        self.n_0.setText(_translate("Calculadora", "0"))
        self.point.setText(_translate("Calculadora", "."))
        self.label.setText(_translate("Calculadora", "CALCULADORA"))
        self.menuCalculadora.setTitle(_translate("Calculadora", "Calculadora"))

    def Escribir(self,txt):
        """
        Esta función se encarga de escribir las operaciones en la caja de texto, revisa que no hayan inconsistencias
        como que se escriban dos operaciones seguidas como + +, - - etc, y dos decimales en un mismo numero ej: 4.4.4
        """
        if self.inputbox.text() != "":
            CadenaActual = self.inputbox.text()

            if txt in Operaciones: # Comprobamos que no escriban dos operaciones 
                # seguidas como ++

                if CadenaActual[-1] == txt: # Si lo que se quiere escribir y la ultima operacion son iguales, la 
                    # función no hace nada
                    return

                else: # Si no se encuentra ninguna anomalia sigue normalmente y escribe el txt
                    pass 

            if txt == ".": # En el caso de que sea un punto tenemos que mirar que no se repita pero en el mismo número
                for c in CadenaActual[::-1]:
                    if c not in Numerico and c != ".":
                        break

                    if c == ".": # Si se encuentra otro punto en el mismo número la función no escribe nada
                        return

         
        self.inputbox.setText(self.inputbox.text() + txt) # Escribe el valor del boton


    def Operar(self,ListaTexto):
        Calculo = [] # Creamos vector donde se guardaran los números a operar
        Num = ""
        l = 0

        while l < len(ListaTexto): # Iteramos en cada 'caracter' de la operación
            
            if ListaTexto[l] == "-": # Lectura del signo menos
                
                Calculo.append(Num)
                Num = ""
                try:
                    if ListaTexto[l-1] in Numerico and ListaTexto[l+1] in Numerico and l >= 1:
                        Calculo.append("+")
                        i = l + 1
                        param = "-"
                        while ListaTexto[i] in Numerico:
                            param += ListaTexto[i]
                            i += 1
                        l = i

                        Calculo.append(param)                        
                except:
                    l = i
                    Calculo.append(param)  
                    pass

                try:
                    if l == 0 and ListaTexto[l+1] in Numerico:
                        i = l + 1
                        param = "-"
                        while ListaTexto[i] in Numerico:
                            param += ListaTexto[i]
                            i += 1
                        l = i
                        Calculo.append(param)

                    elif ListaTexto[l-1] not in Numerico and ListaTexto[l+1] in Numerico:
                        i = l + 1
                        param = "-"
                        while ListaTexto[i] in Numerico:
                            param += ListaTexto[i]
                            i += 1
                        l = i
                        Calculo.append(param)
                except:
                    pass

                continue

            if ListaTexto[l] in OperacionesEspeciales or ListaTexto[l] == '(': # Operaciones como sen(x),cos(x), tan(x), log(x), ln(x)
                
               
                if ListaTexto[l] == '(':
                    
                    CasoS = False
                    CasoJ = False

                    for u in range(l+1,len(ListaTexto)):
                        if ListaTexto[u] == '(': # Si sigue otro parentesis abierto estamos ante un caso
                            # junto (())
                            CasoJ = True
                            break
                        elif ListaTexto[u] == ')': # Si lo siguiente al parentesis abierto es )
                            # Estamos ante un caso de () + ()
                            CasoS = True
                            break
                         
                    if CasoJ: # Caso (())
                        i = len(ListaTexto) - 1
                        param = ""
                        while ListaTexto[i] != ")":
                            i -= 1

                        param = ListaTexto[l+1:i]

                        l = i+1
                        Resultado = self.Operar(list(param))
                        Calculo.append(Resultado)
                        continue

                    elif CasoS: # Caso () ()
                        i = l + 1
                        param = ""
                        while ListaTexto[i] != ")":
                            param += ListaTexto[i]
                            i += 1
                        l = i + 1 # Revisar rango (?)

                        Resultado = self.Operar(list(param))
                        Calculo.append(Resultado)

                        continue

                if ListaTexto[l] == "!":
                    Resultado = math.factorial(int(Num))
                    Calculo.append(Resultado)
                    l += 1
                    Num = ""
                    continue
                    
                
                # s de Seno 
                if ListaTexto[l] == "s":
                    
                    t = l + 4
                    param = ""
                    while ListaTexto[t] != ")":
                        param += ListaTexto[t]
                        t += 1  
                    l = t + 1
                    Resultado = math.sin(float(self.Operar(list(param))))
                    Calculo.append(Resultado)
                    continue
                
                # c de Coseno
                if ListaTexto[l] == "c":
                    t = l + 4
                    param = ""
                    while ListaTexto[t] != ")":
                        param += ListaTexto[t]
                        t += 1  
                    l = t + 1
                    Resultado = math.cos(float(self.Operar(list(param))))
                    Calculo.append(Resultado)
                    continue
                
                # t de Tangente
                if ListaTexto[l] == "t":
                    
                    t = l + 4
                    param = ""
                    while ListaTexto[t] != ")":
                        param += ListaTexto[t]
                        t += 1  
                    l = t + 1
                    Resultado = math.tan(float(self.Operar(list(param))))
                    Calculo.append(Resultado)
                    continue
                
                # L de Log
                if ListaTexto[l] == "l" and ListaTexto[l+1] != "n":
                    t = l + 4 
                    param = ""
                    while ListaTexto[t] != ")":
                        param += ListaTexto[t]
                        t += 1  
                    l = t + 1
                    Resultado = math.log10(float(self.Operar(list(param))))
                    Calculo.append(Resultado)
                    continue
                
                # Ln de Ln
                if ListaTexto[l] == "l" and ListaTexto[l+1] == "n":
                    t = l + 3
                    param = ""
                    while ListaTexto[t] != ")":
                        param += ListaTexto[t]
                        t += 1  
                    l = t + 1
                    Resultado = math.log(float(self.Operar(list(param))))
                    Calculo.append(Resultado)
                    continue

                    

            if ListaTexto[l] in Numerico: # Si es un caracter númerico

                Num += ListaTexto[l] # Si es un caracter númerico se ira acumulando 

                l += 1

            else: # Si no es caracter númerico
                
                Calculo.append(Num) # Cuando nos aseguremos que no sea caracter númerico podemos guardar el número 
                # formado previamente

                if "e" in Calculo: # Convertir el numero de euler
                    Calculo[Calculo.index("e")] = math.e

                if "π" in Calculo: # Convertir el numero de pi
                    Calculo[Calculo.index("π")] = math.pi

                Num = ""

                Calculo.append(ListaTexto[l]) # Agregar la operación a la lista de calculo
                
                l += 1
        
        Calculo.append(Num)

        if "e" in Calculo: # Convertir el numero de euler
            Calculo[Calculo.index("e")] = math.e

        if "π" in Calculo: # Convertir el numero de pi
                    Calculo[Calculo.index("π")] = math.pi

        
        

        try: # Revisar pulir esta parte para eliminar el '' que se pone en la lista al principio aveces
            while '' in Calculo:
                Calculo.pop(Calculo.index(''))
        except:
            pass

        i = 0 
        while i <= 6: # Iteramos por cada una de las 7 operaciones que hay 
            for t in range(len(Calculo)): # Buscamos la operación en cuestion
                try:
                    if Calculo[t] == Operaciones[i]: # Si la encontramos en la cadena la operamos

                        # Raíz
                        if Calculo[t] == "√":
                            Resultado = (float(Calculo[t+1])) ** (1/2) # Hacemos la operación correspondiente 
                            # con los elementos en la lista involucrados

                            Calculo.insert(t+2,Resultado) # insertamos el resultado
                            Calculo.pop(t+1) # Borramos las elementos que conllevaron a ese resultado
                            Calculo.pop(t)
                        
                        # Potenciación 
                        if Calculo[t] == "^":
                            Resultado = (float(Calculo[t-1])) ** (float(Calculo[t+1]))
                            Calculo.insert(t+2,Resultado)
                            Calculo.pop(t+1)
                            Calculo.pop(t)
                            Calculo.pop(t-1)


                        # Multiplicación

                        if Calculo[t] == "×":
                            Resultado = (float(Calculo[t-1])) * (float(Calculo[t+1]))
                            Calculo.insert(t+2,Resultado)
                            Calculo.pop(t+1)
                            Calculo.pop(t)
                            Calculo.pop(t-1)
                        
                        # División
                        if Calculo[t] == "÷":
                            Resultado = (float(Calculo[t-1])) / (float(Calculo[t+1]))
                            Calculo.insert(t+2,Resultado)
                            Calculo.pop(t+1)
                            Calculo.pop(t)
                            Calculo.pop(t-1)

                        # Suma, tomando la resta como el inverso de la suma

                        if Calculo[t] == "+":
                            Resultado = (float(Calculo[t-1])) + (float(Calculo[t+1]))
                            Calculo.insert(t+2,Resultado)
                            Calculo.pop(t+1)
                            Calculo.pop(t)
                            Calculo.pop(t-1)

                         
                except:
                    pass

                if len(Calculo) == 1:
                    return str(Calculo[0])

            i +=1 # Iteración

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Calculadora = QtWidgets.QMainWindow()
    ui = Ui_Calculadora()
    ui.setupUi(Calculadora)
    Calculadora.show()
    sys.exit(app.exec_())
